[project]
name = "tasos-apiauth"
version = "0.2.2"
authors = ["tristeng <tristen.georgiou@gmail.com>"]
description = "A re-usable FastAPI library that implements authentication, users, groups and permission handling."
license = "MIT"
readme = "README.md"
requires-python = ">=3.11"

[project.urls]
Homepage = "https://github.com/tristeng/tasos-apiauth"
Repository = "https://github.com/tristeng/tasos-apiauth.git"
Issues = "https://github.com/tristeng/tasos-apiauth/issues"
Changelog = "https://github.com/tristeng/tasos-apiauth/blob/main/CHANGELOG.md"

[tool.poetry]
name = "tasos-apiauth"
version = "0.2.2"
homepage = "https://github.com/tristeng/tasos-apiauth"
repository = "https://github.com/tristeng/tasos-apiauth.git"
description = "A re-usable FastAPI library that implements authentication, users, groups and permission handling."
authors = ["tristeng <tristen.georgiou@gmail.com>"]
readme = "README.md"
license = "MIT"
packages = [
    {include = "tasos"}
]

[tool.poetry.urls]
Issues = "https://github.com/tristeng/tasos-apiauth/issues"
Changelog = "https://github.com/tristeng/tasos-apiauth/blob/main/CHANGELOG.md"

[tool.poetry.dependencies]
python = "^3.11"
fastapi = "^0.115"
python-multipart = "0.0.18"
python-jose = {extras = ["cryptography"], version = "^3.4"}
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
sqlalchemy = {extras = ["asyncio"], version = "^2.0.34"}
pydantic = {extras = ["email", "dotenv"], version = "^2.9.0"}
pydantic-settings = "^2.3.4"

[tool.poetry.group.dev.dependencies]
pytest = "^8.2.0"
pytest-cov = "^5.0.0"
pytest-env = "^1.1.3"
pytest-asyncio = "^0.23.7"
httpx = "^0.27.0"
aiosqlite = "^0.20.0"
mypy = "^1.10.0"
sqlalchemy = {extras = ["mypy"], version = "^2.0.34"}
types-python-jose = "^3.3.4.20240106"
types-passlib = "^1.7.7.20240327"
uvicorn = "^0.29.0"
ruff = "^0.6.4"

[build-system]
requires = ["poetry-core==1.7.0"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
testpaths = [
    "tests",
]
env = [
    "APIAUTH_SECRET_KEY=somesecretkey",
    "APIAUTH_ALGORITHM=HS256",
    "APIAUTH_ACCESS_TOKEN_EXPIRE_MINUTES=15",
    "APIAUTH_DATABASE_URL=sqlite+aiosqlite://?check_same_thread=false",
]
markers = [
    "integration: mark test as an integration test.",
]
filterwarnings = [
    "ignore::DeprecationWarning:passlib.*:",
    "ignore::DeprecationWarning:pydantic.*:",
    "ignore::DeprecationWarning:jose.*:",
]

[tool.coverage.run]
command_line = "-m pytest tests -m 'not integration'"
branch = true
source = [
    "tasos",
]

[tool.coverage.report]
omit = [
    "tasos/apiauth/api/*",  # this file is tested with the fastapi test client, so coverage isn't reported
]
show_missing = true

[tool.mypy]
plugins = [
    "pydantic.mypy",
    "sqlalchemy.ext.mypy.plugin",
]
packages = [
    "tasos",
    "tests",
]

follow_imports = "silent"
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_reexport = true

# for strict mypy: (this is the tricky one :-))
disallow_untyped_defs = true

[[tool.mypy.overrides]]
module = "tests.apiauth.api.*"  # NOTE: httpx release > 0.27 will fix this
ignore_errors = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 120
indent-width = 4

# Assume Python 3.10
target-version = "py310"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"